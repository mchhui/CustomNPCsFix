package mchhui.customnpcsfix.util;

import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.GsonBuilder;
import com.google.gson.InstanceCreator;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;

import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagShort;
import noppes.npcs.util.JsonException;

public class NBTJsonUtil {

    public static String Convert(NBTTagCompound compound) {
        HashMap tagMap = null;
        Field tagMapField = null;
        try {
            tagMapField = NBTTagCompound.class.getDeclaredField("tagMap");
        } catch (NoSuchFieldException | SecurityException e) {
            try {
                tagMapField = NBTTagCompound.class.getDeclaredField("field_74784_a");
            } catch (NoSuchFieldException | SecurityException e1) {
                // TODO 自动生成的 catch 块
                e1.printStackTrace();
            }
        }
        try {
            tagMapField.setAccessible(true);
            tagMap = (HashMap) tagMapField.get(compound);
        } catch (IllegalArgumentException | IllegalAccessException e) {
            // TODO 自动生成的 catch 块
            e.printStackTrace();
        }
        return new GsonBuilder().setPrettyPrinting().disableHtmlEscaping()
                .registerTypeAdapter(HashMap.class, new NBTTagCompoundJsonSerializer()).create().toJson(tagMap);
    }

    public static NBTTagCompound Convert(String json) throws JsonException {
        return NBTJsonUtil.Convert(json);
    }

    private static class NBTTagCompoundJsonSerializer implements JsonSerializer<HashMap> {

        @Override
        public JsonElement serialize(HashMap src, Type typeOfSrc, JsonSerializationContext context) {
            JsonObject obj = new JsonObject();
            for (Object key : src.keySet().toArray()) {
                NBTBase value = (NBTBase) src.get(key);
                switch (value.getId()) {
                case 2:
                    obj.addProperty(key.toString(),((NBTTagShort) value).func_150289_e());
                }
            }
            return obj;
        }

    }
}
