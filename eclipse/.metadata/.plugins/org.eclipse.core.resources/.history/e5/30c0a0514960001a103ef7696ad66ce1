package mchhui.customnpcsfix.coremod.noppes.npcs.util;

import java.util.List;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.FieldInsnNode;
import org.objectweb.asm.tree.InsnList;
import org.objectweb.asm.tree.InsnNode;
import org.objectweb.asm.tree.JumpInsnNode;
import org.objectweb.asm.tree.LabelNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import net.minecraft.launchwrapper.IClassTransformer;

public class NBTJsonUtilTransformer implements IClassTransformer {

    @Override
    public byte[] transform(String name, String transformedName, byte[] basicClass) {
        if (transformedName.equals("noppes.npcs.util.NBTJsonUtil")) {
            ClassNode classNode = new ClassNode(Opcodes.ASM5);
            ClassReader classReader = new ClassReader(basicClass);
            classReader.accept(classNode, ClassReader.SKIP_DEBUG);
            List<MethodNode> methods = classNode.methods;
            for (MethodNode method : methods) {
                if (method.name.equals("Convert") && method.desc.endsWith("NBTTagCompound;")) {
                    AbstractInsnNode firstNode=method.instructions.getFirst();
                    InsnList list = new InsnList();
                    list.add(new LabelNode());
                    list.add(new FieldInsnNode(Opcodes.BALOAD,"mchhui/customnpcsfix/Config","FastJsonDeserialize", "Z"));
                    list.add(new JumpInsnNode(Opcodes.IFEQ, (LabelNode) firstNode));
                    list.add(new MethodInsnNode(Opcodes.INVOKESTATIC,"mchhui/customnpcsfix/util/NBTJsonUtil","Convert","(Ljava/lang/String;)Lnet/minecraft/nbt/NBTTagCompound;",false));
                    list.add(new InsnNode(Opcodes.ARETURN));
                    method.instructions.insertBefore(firstNode, list);
                    break;
                }
            }
            ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
            return classWriter.toByteArray();
        }
        return basicClass;
    }

}
