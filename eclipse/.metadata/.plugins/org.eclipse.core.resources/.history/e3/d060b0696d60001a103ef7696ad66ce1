package mchhui.customnpcsfix.coremod.noppes.npcs.entity;

import java.util.List;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.FieldInsnNode;
import org.objectweb.asm.tree.InsnList;
import org.objectweb.asm.tree.InsnNode;
import org.objectweb.asm.tree.JumpInsnNode;
import org.objectweb.asm.tree.LabelNode;
import org.objectweb.asm.tree.LocalVariableNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.tree.VarInsnNode;

import cpw.mods.fml.common.FMLLog;
import mchhui.customnpcsfix.Config;
import net.minecraft.entity.Entity;
import net.minecraft.launchwrapper.IClassTransformer;
import net.minecraft.util.DamageSource;

public class EntityNPCInterfaceTransfromer implements IClassTransformer {

    @Override
    public byte[] transform(String name, String transformedName, byte[] basicClass) {
        if (transformedName.equals("noppes.npcs.roles.entity.EntityNPCInterface")) {
            FMLLog.getLogger().warn("[Transforming:noppes.npcs.entity.EntityNPCInterface]");
            ClassNode classNode = new ClassNode(Opcodes.ASM5);
            ClassReader classReader = new ClassReader(basicClass);
            classReader.accept(classNode, 0);
            List<MethodNode> methods = classNode.methods;
            for (MethodNode method : methods) {
                if (method.name.equals("attackEntityFrom") || method.name.equals("func_70097_a")) {
                    for (AbstractInsnNode node : method.instructions.toArray()) {
                        if (node.getOpcode() == Opcodes.ASTORE && ((VarInsnNode) node).var == 5
                                && node.getPrevious().getOpcode() == Opcodes.INVOKESPECIAL) {
                            InsnList list = new InsnList();
                            list.add(new LabelNode());
                            list.add(new VarInsnNode(Opcodes.ALOAD, 0));
                            list.add(new VarInsnNode(Opcodes.ALOAD, 1));
                            list.add(new VarInsnNode(Opcodes.FLOAD, 2));
                            list.add(new MethodInsnNode(Opcodes.INVOKESTATIC,
                                    "mchhui/customnpcsfix/coremod/noppes/npcs/entity/EntityNPCInterfaceTransfromer",
                                    "preAttackEntityFrom",
                                    "(Lnet/minecraft/entity/Entity;Lnet/minecraft/util/DamageSource;I)Z", false));
                            list.add(new VarInsnNode(Opcodes.ASTORE, 10));
                            method.instructions.insert(node,list);
                            method.localVariables.add(new LocalVariableNode("superResult", "Z", null,
                                    (LabelNode) method.instructions.getFirst(),
                                    (LabelNode) method.instructions.getLast(), 10));
                        }
                        if (node.getOpcode() == Opcodes.INVOKEVIRTUAL
                                && ((MethodInsnNode) node).name.equals(method.name)) {
                            InsnList list = new InsnList();
                            list.add(new LabelNode());
                            list.add(new VarInsnNode(Opcodes.ALOAD, 1));
                            list.add(new VarInsnNode(Opcodes.FLOAD, 2));
                            list.add(new VarInsnNode(Opcodes.ILOAD, 10));
                            list.add(new MethodInsnNode(Opcodes.INVOKESTATIC,
                                    "mchhui/customnpcsfix/coremod/noppes/npcs/entity/EntityNPCInterfaceTransfromer",
                                    "AttackEntityFrom",
                                    "(Lnet/minecraft/entity/Entity;Lnet/minecraft/util/DamageSource;IZ)Z", false));
                            method.instructions.insertBefore(node, list);
                            method.instructions.remove(node);
                        }
                    }
                }
            }
            ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
            classNode.accept(classWriter);
            FMLLog.getLogger().warn("[Transformed:noppes.npcs.entity.EntityNPCInterface]");
            return classWriter.toByteArray();
        }
        return basicClass;
    }

    public static boolean preAttackEntityFrom(Entity entity, DamageSource damageSource, int amount) {
        if (!Config.DamagedFireSlowerThanBukkit) {
            return false;
        }
        return entity.attackEntityFrom(damageSource, amount);
    }

    public static boolean attackEntityFrom(Entity entity, DamageSource damageSource, int amount, boolean MaybeResult) {
        FMLLog.getLogger().info("test");
        if (!Config.DamagedFireSlowerThanBukkit) {
            return entity.attackEntityFrom(damageSource, amount);
        }
        return MaybeResult;
    }

}
